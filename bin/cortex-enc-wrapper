#!/usr/bin/python

import sys, requests, warnings, os, ConfigParser

################################################################################

def cache_catalog(certname, catalog, cache_dir):
	"""Caches the catalog for the given node to disk"""

	# Open the file for writing
	with open(os.path.join(cache_dir, certname), 'w') as f:
		# Write the catalog
		f.write(catalog)

################################################################################

def print_catalog(certname, cache_dir):
	"""Reads the catalog from disk (if possible) and then prints it out. Returns 0 on success and 1 on error"""

	try:
		# Open the catalog, read it and print it out
		with open(os.path.join(cache_dir, certname), 'r') as f:
			print f.read()
	except Exception as e:
		return 1

	return 0

################################################################################

# Validate arguments
if len(sys.argv) <= 1:
	print >> sys.stderr, "Usage: cortex-env-wrapper <nodename>"
	sys.exit(1)

# Read config file
config = ConfigParser.RawConfigParser()
try:
	config.read('/data/cortex/enc.conf')
except Exception as e:
	print >> sys.stderr, "Failed to read configuration: " + str(e)
	sys.exit(1)

try:
	cache_dir = config.get('enc', 'cache_dir')
	cortex_url = config.get('enc', 'cortex_url')
	auth_token = config.get('enc', 'auth_token')
	if config.has_option('enc', 'ssl_verify'):
		ssl_verify = config.getboolean('enc', 'ssl_verify')
	else:
		ssl_verify = True
except Exception as e:
	print >> sys.stderr, 'Failed to get configuration option: ' + str(e)
	sys.exit(1)

# Get the certname of the node to find
certname = sys.argv[1]

# Request the page, and don't print out the InsecureRequestWarning
try:
	with warnings.catch_warnings():
		if not ssl_verify:
			warnings.simplefilter("ignore", requests.packages.urllib3.exceptions.InsecureRequestWarning)
		r = requests.post(cortex_url + '/' + certname, data={'auth_token': auth_token}, headers={'Accept': 'application/yml'}, verify=ssl_verify)
except Exception as e:
	# On exception, attempt to print cache
	sys.exit(print_catalog(certname, cache_dir))

# On a 200 OK response, we should cache the catalog and print it out for the ENC
if r.status_code == 200:
	# Cache the catalog to the file system
	cache_catalog(certname, r.text, cache_dir)

	# Return the catalog to Puppet
	print r.text
	sys.exit(0)

# On a 404 Not Found response, print out an empty catalog
elif r.status_code == 404:
	# Return blank catalog to Pupper
	print "classes:"
	sys.exit(0)

# On any other response, attempt to return the cache
else:
	sys.exit(print_catalog(certname, cache_dir))

# Shouldn't get here
sys.exit(1)
